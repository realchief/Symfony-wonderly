<?php

namespace FrontendBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\Query\Parameter;
use FrontendBundle\Entity\Category;
use FrontendBundle\Entity\Event;
use FrontendBundle\Repository\AbstractRepository\AbstractRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends AbstractRepository
{

    /**
     * @param integer|string $userId A User entity id.
     *
     * @return mixed
     */
    public function getSpecificTag($userId)
    {
        $query = $this->createQueryBuilder('Category')
            ->select('DISTINCT Category.tag')
            ->join('Category.event', 'Event')
            ->join('Event.organize', 'Organizer')
            ->where('Organizer.id = :userId')
            ->setParameter('userId', $userId)
            ->getQuery();

        return $query->getResult();
    }


// : does not work properly, maybe later
//
//    public function getCategoryForHomepage(array $categoriesIds = [], \DateTime $eventDate = null)
//    {
//
//        $filterByDays = $eventDate !== null;
//        $eventDate = $filterByDays ? $eventDate : new \DateTime();
//
//        $expr = $this->_em->getExpressionBuilder();
//
//        $condition = $expr->andX();
//        $parameters = new ArrayCollection([
//            new Parameter('eventDate', $eventDate),
//        ]);
//
//        if ($filterByDays) {
//            $array = $this->findByDay($eventDate, $parameters, $condition);
//            $parameters = $array['parameters'];
//            $condition = $array['whereCondition'];
//        } else {
//            $condition->add($expr->orX(
//                $expr->isNull('Event.eventDate'),
////                $expr->andX(
////                    $expr->isNull('Event.eventDate'),
////                    $expr->orX(
////                        $expr->in('Periodic.day', ':periodicMaps'),
////                        $expr->isNull('Periodic.id')
////                    )
////                ),
//                $expr->gte('Event.eventDateEnd', ':eventDate'),
//                $expr->andX(
//                    $expr->isNull('Event.eventDateEnd'),
//                    $expr->gte('Event.eventDate', ':eventDate')
//                )
//            ));
////            $parameters->add(new Parameter('periodicMaps', $this->periodicMaps));
//        }
//        if (count($categoriesIds) > 0) {
//            $condition->add($expr->andX(
//                $expr->eq('_Category.id', 'Category.id'),
//                $expr->in('_Category2.id', ':ids')
//            ));
//            $parameters->add(new Parameter('ids', $categoriesIds));
//        } else {
//            $condition->add($expr->eq('_Category.id', 'Category.id'));
//        }
//
//        $eventCountQB = $this->_em->createQueryBuilder()
//            ->select('COUNT(Event.id)')
//            ->from(Event::class, 'Event')
//            ->innerJoin('Event.category', '_Category')
//            ->andWhere($condition);
//
////        $eventCountQB->leftJoin('Event.periodic', 'Periodic');
//
//        if (count($categoriesIds) > 0) {
//            $eventCountQB->innerJoin('Event.category', '_Category2');
//        }
//
//        $query = $this->createQueryBuilder('Category')
//           ->addSelect("({$eventCountQB->getDQL()}) AS eventCount")
//           ->setParameters($parameters)
//           ->getQuery();
//
//        return $query->getResult();
//    }
}
