<?php

namespace FrontendBundle\Repository;

use Component\EventFilter\Model\ComparableValue;
use Component\EventFilter\Model\EventFilters;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Comparison;
use Doctrine\ORM\Query\Expr\Composite;
use Doctrine\ORM\Query\Expr\Orx;
use Doctrine\ORM\Query\Parameter;
use Doctrine\ORM\QueryBuilder;
use DoctrineExtensions\Query\Mysql\Date;
use FrontendBundle\Entity\Category;
use FrontendBundle\Entity\Event;
use Component\TableProcessor\TableProcessorSourceInterface;


use FrontendBundle\Repository\AbstractRepository\AbstractRepository;
use function \nspl\a\map;
use function \nspl\op\methodCaller;
use function Sodium\add;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use UserBundle\Entity\User;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends AbstractRepository implements
    TableProcessorSourceInterface
{

    protected $operatorMap = array(
        ComparableValue::OPERATOR_EQ => Comparison::EQ,
        ComparableValue::OPERATOR_NEQ => Comparison::NEQ,
        ComparableValue::OPERATOR_GT => Comparison::GT,
        ComparableValue::OPERATOR_GTE => Comparison::GTE,
        ComparableValue::OPERATOR_LT => Comparison::LT,
        ComparableValue::OPERATOR_LTE => Comparison::LTE,
    );

    /**
     * @param integer|string $id A Event entity id.
     *
     * @return Event|null
     */
    public function get($id)
    {
        return $this->createQueryBuilder('Event')
            ->addSelect('Age')
            ->leftJoin('Event.age', 'Age')
            ->where('Event.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param EventFilters $eventFilters A used event filters.
     *
     * @return QueryBuilder
     */
    public function searchWithFilters(EventFilters $eventFilters)
    {
        return $this->createQbFromEventFilters($eventFilters);
    }

    private function createQbFromEventFilters(EventFilters $eventFilters)
    {
        $expr = $this->_em->getExpressionBuilder();

        $whereCondition = $expr->andX();
        $havingCondition = $expr->andX();
        $parameters = new ArrayCollection();

        if ($eventFilters->isOnlyFree()) {
            $whereCondition->add($expr->orX(
                $expr->eq('Event.price', 0),
                $expr->isNull('Event.price')
            ));
        }

        // Resolve ages filters.
        $ages = $eventFilters->getAges();
        $hasAgeFilters = count($ages) > 0;
        if ($hasAgeFilters) {
            $whereCondition->add($this->resolveComparableValues($ages, 'Age.year', $parameters));
        }

        // Resolve distance filters.
        $additionalSelect = $this
            ->resolveDistancesCondition($eventFilters, $havingCondition, $parameters);

        // Resolve hours filters.
        $this->resolveHourConditions($eventFilters, $whereCondition, $parameters);

        // Resolve category filters.
        $categories = $eventFilters->getCategories();
        if (count($categories) > 0) {
            $whereCondition->add($expr->in('Category', ':categories'));
            $parameters->add(new Parameter('categories', $categories));
        }

        // Resolve date filters.
        $this->resolveDateCondition($eventFilters, $whereCondition, $parameters);

        $qb = $this->createQueryBuilder('Event')
            ->addSelect($additionalSelect)
            ->addSelect('Category')
            ->join('Event.category', 'Category')
            ->setParameters($parameters);

        $qb->leftJoin('Event.periodic', 'Periodic');

        if ($hasAgeFilters) {
            $qb->leftJoin('Event.age', 'Age');
        }

        if ($whereCondition->count() > 0) {
            $qb->where($whereCondition);
        }

        if ($havingCondition->count() > 0) {
            $qb->having($havingCondition);
        }

        $qb->orderBy('Event.id', 'DESC');

        return $qb;
    }


    /**
     * @param EventFilters    $eventFilters A required event filters.
     * @param Composite       $condition    Conditions to which a new condition
     *                                      is added.
     * @param ArrayCollection $parameters   Conditions parameters.
     *
     * @return void
     */
    private function resolveDateCondition(
        EventFilters $eventFilters,
        Composite $condition,
        ArrayCollection $parameters
    ) {
        $dateEvent = $eventFilters->getDateEvent();
        if ($dateEvent === null) {
            $this->findWithoutDay($condition, $parameters);
        } else {
            $parameters->add(new Parameter('eventDate', $dateEvent));
            $this->findByDay($dateEvent, $parameters, $condition);
        }
    }

    /**
     * @param EventFilters    $eventFilters A required event filters.
     * @param Composite       $condition    Conditions to which a new condition
     *                                      is added.
     * @param ArrayCollection $parameters   Conditions parameters.
     *
     * @return string
     */
    private function resolveDistancesCondition(
        EventFilters $eventFilters,
        Composite $condition,
        ArrayCollection $parameters
    ) {
        $distances = $eventFilters->getDistances();
        $additionalSelect = '';

        if (count($distances) > 0) {
            // Compute distance from specified point to each event.
            $destination = $eventFilters->getDestination();

            $additionalSelect = '
                    (7917.48 * ATAN2(
                        SQRT(
                            POWER(SIN(RADIANS(:lat - X(Event.point)) / 2), 2) +
                            COS(RADIANS(X(Event.point))) * COS(RADIANS(:lat)) *
                            POWER(SIN(RADIANS(:long - Y(Event.point)) / 2), 2)
                        ),
                        SQRT(
                            1 - (
                                POWER(SIN(RADIANS(:lat - X(Event.point)) / 2), 2) +
                                COS(RADIANS(X(Event.point))) * COS(RADIANS(:lat)) *
                                POWER(SIN(RADIANS(:long - Y(Event.point)) / 2), 2)
                            )
                        )
                    )) AS HIDDEN distance
            ';

            $condition->add($this->resolveComparableValues($distances, 'distance', $parameters));
            $parameters->add(new Parameter('lat', $destination->getX()));
            $parameters->add(new Parameter('long', $destination->getY()));
        }
        return $additionalSelect;
    }

    /**
     * @param EventFilters    $eventFilters A required event filters.
     * @param Composite       $condition    Conditions to which a new condition
     *                                      is added.
     * @param ArrayCollection $parameters   Conditions parameters.
     *
     * @return void
     */
    private function resolveHourConditions(
        EventFilters $eventFilters,
        Composite $condition,
        ArrayCollection $parameters
    ) {
        $hours = $eventFilters->getHours();
        if (count($hours) > 0) {
            $expr = $this->_em->getExpressionBuilder();

            $hoursCondition = $expr->orX();
            foreach ($hours as $idx => $hour) {
                $startKey = 'hour_'. $idx .'_start';
                $endKey = 'hour_'.$idx.'_end';

                $hoursCondition->add($expr->andX(
                    $expr->gte('HOUR(Event.origin)', ':'. $startKey),
                    $expr->lte('HOUR(Event.origin)', ':'. $endKey)
                ));
                $parameters->add(new Parameter($startKey, $hour->getStart()));
                $parameters->add(new Parameter($endKey, $hour->getEnd()));
            }

            $condition->add($hoursCondition);
        }
    }

    /**
     * Resolve array of comparable values.
     *
     * @param ComparableValue[] $values     Array of resolved comparable values.
     * @param string            $field      Comparable entity field.
     * @param ArrayCollection   $parameters Collection of condition parameters.
     *
     * @return Orx A created condition.
     */
    private function resolveComparableValues(
        array $values,
        $field,
        ArrayCollection $parameters
    ) {
        $condition = new Orx();

        foreach ($values as $idx => $value) {
            $key = str_replace('.', '_', $field) .'_'. $idx;
            $operation =$this->operatorMap[$value->getOperator()];

            $condition->add(new Comparison($field, $operation, ':'. $key));
            $parameters->add(new Parameter($key, $value->getValue()));
        }

        return $condition;
    }

    /**
     * Get Event by time.
     *
     * @param \DateTime $start      Time start.
     * @param \DateTime $end        Time end.
     * @param integer   $max_result Max count event.
     * @param \DateTime $date
     *
     * @return mixed
     */
    public function findForTime(
        \DateTime $start,
        \DateTime $end,
        $max_result,
        $date = null
    ) {
        if ($date === null) {
            $query = $this->createQueryBuilder('Event')
                ->where('Event.origin >= :start')
                ->andWhere('Event.origin <= :end')
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->getQuery();
        } else {
            $query = $this->createQueryBuilder('Event')
                ->where('Event.origin >= :start')
                ->andWhere('Event.origin <= :end')
                ->andWhere('Event.eventDate = :date')
                ->setParameter('start', $start)
                ->setParameter('end', $end)
                ->setParameter('date', $date)
                ->getQuery();
        }

        return $query->setMaxResults($max_result)->getResult();
    }

    /**
     * Get Event by day.
     *
     * @param \DateTime $eventDate Time start
     *
     * @return QueryBuilder
     */
    public function findByDayEvents(\DateTime $eventDate, $location, $searchByName = '')
    {

        $parameters = new ArrayCollection([
            new Parameter('eventDate', $eventDate),
        ]);

        if($searchByName != '') {
            $parameters->add(new Parameter('eventName', $searchByName."%"));
        }


        $expr = $this->_em->getExpressionBuilder();
        $array = $this->findByDay($eventDate, $parameters, $expr->andX());
        $whereCondition = $array['whereCondition'];
        $parameters = $array['parameters'];

        // $this->addLocationToParameters($location, $parameters, 266);

        $qb = $this->createQueryBuilder('Event')
            ->leftJoin('Event.periodic', 'Periodic')
            ->setParameters($parameters);

        // $this->addLocationToQuery($location, $qb);

        if ($whereCondition->count() > 0) {
            $qb->where($whereCondition);
        }

        if($searchByName != '') {
            $qb->andWhere('Event.name like :eventName');
        }

        $qb->orderBy('Event.id', 'DESC');

        return $qb;
    }



    /**
     * Get Event by day.
     *
     * @param \DateTime $eventDate Time start.
     * @param Category  $category  A Category Instance.
     *
     * @return QueryBuilder
     */
    public function findEventByCategoryByDay(\DateTime $eventDate, $category)
    {
        $parameters = new ArrayCollection([
            new Parameter('eventDate', $eventDate),
        ]);
        $expr = $this->_em->getExpressionBuilder();
        $array = $this->findByDay($eventDate, $parameters, $expr->andX());

        /** @var Composite $whereCondition */
        $whereCondition = $array['whereCondition'];
        /** @var ArrayCollection $parameters */
        $parameters = $array['parameters'];

        $expr = $this->_em->getExpressionBuilder();
        $whereCondition->add($expr->eq('category.id', ':category'));
        $parameters->add(new Parameter('category', $category));

        $qb = $this->createQueryBuilder('Event')
            ->leftJoin('Event.periodic', 'Periodic')
            ->leftJoin('Event.category', 'category')
            ->setParameters($parameters);

        if ($whereCondition->count() > 0) {
            $qb->where($whereCondition);
        }
        return $qb;
    }

    /**
     * Get All day.
     *
     * @param integer   $max_result Max count event.
     * @param \DateTime $date       Date.
     *
     * @return mixed
     */
    public function findAllDay($max_result, $date = null)
    {
        if ($date === null) {
            $query = $this->createQueryBuilder('Event')
                ->where('Event.origin is NULL')
                ->getQuery();
        } else {
            $query = $this->createQueryBuilder('Event')
                ->where('Event.origin is NULL')
                ->andWhere('Event.eventDate = :date')
                ->orWhere('Event.eventDate is NULL')
                ->setParameter('date', $date)
                ->getQuery();
        }

        return $query->setMaxResults($max_result)->getResult();
    }

    /**
     * Get All day.
     *
     * @param integer $max_result Max count event.
     * @param float   $latitude
     * @param float   $longitude
     *
     * @return array
     */
    public function getEventForLastNews(int $max_result, float $latitude, float $longitude)
    {
        $em = $this->getEntityManager();
        $d = $em->getRepository('FrontendBundle:Event')->createQueryBuilder('e');
        $d
            ->select('e')
            ->addSelect(
                '( 3959 * acos(cos(radians(:lat))' .
                '* cos( radians( Y(e.point) ) )' .
                '* cos( radians( X(e.point) )' .
                '- radians(:long) )' .
                '+ sin( radians(:lat) )' .
                '* sin( radians( Y(e.point) ) ) ) ) as HIDDEN distance'
            )
            ->having('distance < :distance')
            ->setParameter('distance', 15)
            ->setParameter('lat', $latitude)
            ->setParameter('long', $longitude)
            ->orderBy('e.id', 'DESC')
            ->setMaxResults($max_result);

        return $d->getQuery()->getResult();
    }

    /**
     * Get All day.
     *
     * @param integer $max_result Max count event.
     *
     * @return array
     */
    public function getEventForLastNewsWithoutIP(int $max_result)
    {
        $query = $this->createQueryBuilder('Event')
            ->orderBy('Event.eventDate', 'DESC')
            ->getQuery()
            ->setMaxResults($max_result);
        return $query->getResult();
    }

    /**
     * Get events for homepage.
     *
     * @return QueryBuilder
     */
    public function getEventsForHomepage($location, $searchByName = '')
    {
        $parameters = new ArrayCollection();
        $expr = $this->_em->getExpressionBuilder();
        $condition = $expr->andX();

        $this->findWithoutDay($condition, $parameters);

        if($searchByName != '') {
            $parameters->add(new Parameter('eventName', $searchByName."%"));
        }

        // $this->addLocationToParameters($location, $parameters, 266);

        $qb = $this->createQueryBuilder('Event')
            ->leftJoin('Event.periodic', 'Periodic')
            ->setParameters($parameters)
            ->orderBy('Event.id', 'DESC');

        // $this->addLocationToQuery($location, $qb);

        if ($condition->count() > 0) {
            $qb->where($condition);
        }
        if($searchByName != '') {
            $qb->andWhere('Event.name like :eventName');
        }

        return $qb;
    }

    /**
     * Get events for homepage by category.
     *
     * @param integer $category A Category Id.
     *
     * @return QueryBuilder
     */
    public function getEventsByCategoryForHomepage($category)
    {
        $parameters = new ArrayCollection();
        $expr = $this->_em->getExpressionBuilder();
        $condition = $expr->andX();
        $this->findWithoutDay($condition, $parameters);
        $condition->add($expr->eq('Category.id', ':category'));
        $parameters->add(new Parameter('category', $category));

        $qb = $this->createQueryBuilder('Event')
            ->leftJoin('Event.periodic', 'Periodic')
            ->innerJoin('Event.category', 'Category')
            ->setParameters($parameters)
            ->orderBy('Event.id', 'DESC');

        if ($condition->count() > 0) {
            $qb->where($condition);
        }

        return $qb;
    }

    /**
     * Get reccomend Events.
     *
     * @param $location
     * @return QueryBuilder
     */
    public function getRecommend($location)
    {
        $parameters = new ArrayCollection();
        $expr = $this->_em->getExpressionBuilder();
        $condition = $expr->andX();
        $this->findWithoutDay($condition, $parameters);
        $condition->add($expr->eq('Event.recommend', '1'));

        $this->addLocationToParameters($location, $parameters, 266);

        $qb = $this->createQueryBuilder('Event')
            ->leftJoin('Event.periodic', 'Periodic')
            ->setParameters($parameters)
            ->orderBy('Event.id', 'DESC');

        $this->addLocationToQuery($location, $qb);

        if ($condition->count() > 0) {
            $qb->where($condition);
        }

        return $qb;
    }

    /**
     * Get Events by category.
     *
     * @param integer $category   A category id.
     * @param integer $max_result Max count event.
     *
     * @return array
     */
    public function getByCategory($category, $max_result)
    {
        return $this->createQueryBuilder('Event')
            ->innerJoin('Event.category', 'c')
            ->where('c.id = :category')
            ->setParameter('category', $category)
            ->getQuery()
            ->setMaxResults($max_result)
            ->getResult();
    }

    /**
     * Get true if User Liked Event.
     *
     * @param User  $user  A User instance.
     * @param Event $event A event instance.
     *
     * @return boolean
     */
    public function getTrueIfUserLiked($user, $event)
    {
        $event = $this->createQueryBuilder('Event')
            ->innerJoin('Event.likedUser', 'u')
            ->where('Event.id = :event')
            ->andWhere('u.id = :user')
            ->setParameter('event', $event)
            ->setParameter('user', $user)
            ->getQuery()
            ->getOneOrNullResult();

        return $event !== null;
    }

    /**
     * Get Events If User Liked.
     *
     * @param User $user A User instance.
     *
     * @return QueryBuilder
     */
    public function getEventsIfUserLiked($user)
    {
        return $this->createQueryBuilder('Event')
            ->select('Event')
            ->join('Event.likedUser', 'User')
            ->where('User.id = :user')
            ->setParameter(':user', $user)
            ->orderBy('Event.id', 'DESC');
    }

    /**
     * Get Match Id Licked Events.
     *
     * @param User  $user     A User instance.
     * @param array $eventsId Array events id.
     *
     * @return array
     */
    public function getMatchIfUserLiked($user, $eventsId)
    {
        return $this->createQueryBuilder('Event')
            ->select('Event')
            ->join('Event.likedUser', 'User')
            ->where('User.id = :user')
            ->andWhere('Event.id IN (:eventIds)')
            ->setParameter(':user', $user)
            ->setParameter(':eventIds', $eventsId)
            ->getQuery()
            ->getResult();
    }

    /**
     * Get data for table processing.
     *
     * @param array $filters Raw array of filters.
     *
     * @return QueryBuilder
     */
    public function getQueryBuilder(array $filters)
    {
        $expr = $this->_em->getExpressionBuilder();
        $condition = $expr->andX();
        $parameters = new ArrayCollection();
        $qb = $this->createQueryBuilder('Event')
            ->select('Event', 'Organizer', 'User')
            ->join('Event.organize', 'Organizer')
            ->innerJoin('Organizer.user', 'User')
//            ->where($condition)
            ->setParameters($parameters)
            ->groupBy('Event.id');
        if ($condition->count() > 0) {
            $qb
                ->where($condition)
                ->setParameters($parameters);
        }

        return $qb;
    }

    /**
     * Get action urls for specified entity.
     *
     * @param UrlGeneratorInterface $urlGenerator A UrlGeneratorInterface
     *                                            instance.
     * @param string|integer        $id           A entity instance id.
     *
     * @return array
     */
    public function getActionUrls(UrlGeneratorInterface $urlGenerator, $id)
    {
        return array (
            'img' => $urlGenerator->generate('admin_event_eventimg', array (
                'id' => $id,
            )),
            'edit' => $urlGenerator->generate('admin_event_eventedit', array (
                'id' => $id,
            )),
        );
    }

    /**
     * @param array $row Normalize single row of results.
     *
     * @return array
     */
    public function normalize(array $row)
    {
        return $row;
    }


    private function addLocationToParameters($location, $parameters, $distance)
    {
        if ($location) {
            $parameters->add(new Parameter('distance', $distance));
            $parameters->add(new Parameter('lat', $location['lat']));
            $parameters->add(new Parameter('long', $location['lon']));
        }
    }

    private function addLocationToQuery($location, $query)
    {
        if ($location) {
            $query->addSelect(
                '( 3959 * acos(cos(radians(:lat))' .
                '* cos( radians( Y(Event.point) ) )' .
                '* cos( radians( X(Event.point) )' .
                '- radians(:long) )' .
                '+ sin( radians(:lat) )' .
                '* sin( radians( Y(Event.point) ) ) ) ) as HIDDEN distance'
            )
                ->having('distance < :distance');
        }
    }
}
