<?php

namespace UserBundle\Entity\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\EntityRepository;
use Component\TableProcessor\TableProcessorSourceInterface;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Doctrine\ORM\Query\Parameter;

/**
 * OrganizeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrganizeRepository extends EntityRepository implements TableProcessorSourceInterface
{

    /**
     * Get data for table processing.
     *
     * @param array $filters Raw array of filters.
     *
     * @return QueryBuilder
     */
    public function getQueryBuilder(array $filters = [])
    {
        $expr = $this->_em->getExpressionBuilder();
        $condition = $expr->andX();
        $parameters = new ArrayCollection();
        $qb = $this->createQueryBuilder('Organizer')
            ->select('Organizer, User')
            ->join('Organizer.user', 'User')
            ->setParameters($parameters)
            ->groupBy('Organizer.id');
        if ($condition->count() > 0) {
            $qb
                ->where($condition)
                ->setParameters($parameters);
        }
        return $qb;
    }

    /**
     * Get action urls for specified entity.
     *
     * @param UrlGeneratorInterface $urlGenerator A UrlGeneratorInterface
     *                                            instance.
     * @param string|integer        $id           A entity instance id.
     *
     * @return array
     */
    public function getActionUrls(UrlGeneratorInterface $urlGenerator, $id)
    {
        return [
            'edit' => $urlGenerator->generate('admin_user_userorganizersedit', [
                'id' => $id,
            ]),
//            'all_events' => $urlGenerator->generate('admin_event_eventlistuser', [
//                'id' => $id,
//            ]),
            'add_event' => $urlGenerator->generate('admin_event_eventcreateuser', [
                'id' => $id,
            ]),
//            'delete_organizer' => $urlGenerator->generate('admin_user_userorganizersdelete', [
//                'id' => $id,
//            ]),
//            'delete_user' => $urlGenerator->generate('admin_user_userdelete', [
//                'id' => $id,
//            ]),
        ];
    }

    /**
     * @param array $row Normalize single row of results.
     *
     * @return array
     */
    public function normalize(array $row)
    {
        return $row;
    }

    public function findByEmail($email)
    {
        $qb = $this->createQueryBuilder('Organizer')
                   ->select('Organizer, User')
                   ->join('Organizer.user', 'User')
                    ->where('User.email = :email')
                   ->setParameters(['email'=>$email])
            ->getQuery()
            ->getOneOrNullResult();
        return $qb;
    }
}
